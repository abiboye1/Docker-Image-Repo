pipeline {
    agent any

    environment {
        VERSION = "1.0.${BUILD_NUMBER}"
        PATH = "${PATH}:${getSonarPath()}"
    }

    stages {
//         stage ('Sonarcube Scan') {
//         steps {
//          script {
//           scannerHome = tool 'sonarqube'
//         }
//         withCredentials([string(credentialsId: 'SONAR_TOKEN', variable: 'SONAR_TOKEN')]){
//         withSonarQubeEnv('SonarQubeScanner') {
//           sh " ${scannerHome}/bin/sonar-scanner \
//           -Dsonar.projectKey=CliXX-App-Abib   \
//           -Dsonar.login=${SONAR_TOKEN} "
//         }
//         }
//         }

// }

//  stage('Quality Gate') {
//             steps {
//                 timeout(time: 10, unit: 'MINUTES') {
//                     waitForQualityGate abortPipeline: true
//             }
//             }
//         }



// ##########################################################


 stage ('Build Docker Image') {
          steps {
            // script{
            //  dockerHome= tool 'docker-inst'
            // }
            //  sh "${dockerHome}/bin/docker build . -t clixx-image:$VERSION "
            sh "docker build . -t clixx-image:$VERSION " 
            // sh '''
            // // sudo systemctl start docker
            // sudo chmod 666 /var/run/docker.sock
            // docker build . -t clixx-image:$VERSION
            // '''
          }
        }

  stage ('Starting Docker Image') {
          steps {
              sh '''
              if ( docker ps|grep clixx-cont-1 ) then
                 echo "Docker image exists, killing it"
                 docker stop clixx-cont-1
                 docker rm clixx-cont-1
                 docker run --name clixx-cont-1  -p 80:80 -d clixx-image:$VERSION
              else
                 docker run --name clixx-cont-1  -p 80:80 -d clixx-image:$VERSION 
              fi
              '''
          }
        }
       
  stage ('Restore CliXX Database') {
          steps {
              withCredentials([string(credentialsId: 'secret_key', variable: 'SECRET_KEY_VAR'),string(credentialsId: 'access_key', variable: 'ACCESS_KEY_VAR')]){
              sh '''
            pip3 install boto3 botocore boto
            ansible-playbook -i localhost $WORKSPACE/deploy_db_ansible/deploy_db.yml --extra-vars "access_key=${ACCESS_KEY_VAR} secret_key=${SECRET_KEY_VAR}"
              '''
          }
          }
        }

  stage ('Configure DB Instance') {
          steps {
            script {
                def userInput = input(id: 'confirm', message: 'Is DB creation complete?', parameters: [ [$class: 'BooleanParameterDefinition', defaultValue: false, description: 'Complete?', name: 'confirm'] ])
             }
              withCredentials([string(credentialsId: 'DB_USER_NAME', variable: 'DB_USER_NAME'),string(credentialsId: 'DB_PASSWORD', variable: 'DB_PASSWORD'),string(credentialsId: 'DB_NAME', variable: 'DB_NAME'),string(credentialsId: 'SERVER_INSTANCE', variable: 'SERVER_INSTANCE')]){
              sh '''
               USERNAME=${DB_USER_NAME}
               PASSWORD=${DB_PASSWORD}
               DBNAME=${DB_NAME}
               
               SERVER_IP=$(curl -s http://checkip.dyndns.org | sed -e 's/.*Current IP Address: //' -e 's/<.*$//')
               echo ${SERVER_IP}
               SERVER_INSTANCE=${SERVER_INSTANCE}
               echo "use wordpressdb;" >> ./db.setup
               echo "UPDATE wp_options SET option_value = '${SERVER_IP}' WHERE option_value LIKE 'http%';" >> $WORKSPACE/db.setup
               mysql -u $USERNAME --password=$PASSWORD -h $SERVER_INSTANCE  -D  $DBNAME < $WORKSPACE/db.setup

              '''
          }
        }
  }
     
  stage ('Tear Down CliXX Docker Image and Database') {
          steps {
             script {
                def userInput = input(id: 'confirm', message: 'Tear Down Environment?', parameters: [ [$class: 'BooleanParameterDefinition', defaultValue: false, description: 'Tear Down Environment?', name: 'confirm'] ])
             }
              sh '''
            python3 -m venv python3-virtualenv
            source python3-virtualenv/bin/activate
            python3 --version
            pip3 install boto3 botocore boto
            ansible-playbook $WORKSPACE/deploy_db_ansible/delete_db.yml
            deactivate
            docker stop clixx-cont-1
            docker rm  clixx-cont-1

              '''
          }
        }
   
  stage ('Log Into ECR and push the newly created Docker') {
          steps {
             script {
                def userInput = input(id: 'confirm', message: 'Push Image To ECR?', parameters: [ [$class: 'BooleanParameterDefinition', defaultValue: false, description: 'Push to ECR?', name: 'confirm'] ])
             }
             withCredentials([string(credentialsId: 'ECR_USERNAME', variable: 'ECR_USERNAME'), string(credentialsId: 'ECR_REPO', variable: 'ECR_REPO'), ]){
              sh '''
                aws ecr get-login-password --region us-east-1 | docker login --username ${ECR_USERNAME} --password-stdin ${ECR_REPO}
                docker tag clixx-image:$VERSION 767397944080.dkr.ecr.us-east-1.amazonaws.com/clixx-repository:clixx-image-$VERSION
                docker tag clixx-image:$VERSION 767397944080.dkr.ecr.us-east-1.amazonaws.com/clixx-repository:latest
                docker push 767397944080.dkr.ecr.us-east-1.amazonaws.com/clixx-repository:clixx-image-$VERSION
                docker push 767397944080.dkr.ecr.us-east-1.amazonaws.com/clixx-repository:latest
              '''
          }
        }
    }
}
}

def getSonarPath(){
        def SonarHome= tool name: 'sonarqube', type: 'hudson.plugins.sonar.SonarRunnerInstallation'
        return SonarHome
    }

def getDockerPath(){
        def DockerHome= tool name: 'docker-inst', type: 'dockerTool'
        return DockerHome
    }
